name: Windows build
on:
  workflow_call:
    inputs:
      repository:
        default: ${{ github.repository }}
        required: false
        type: string
      rime_plugins:
        required: false
        type: string

jobs:
  build:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        compiler: [msvc, clang]
        arch: [x64]
        include:
          - { compiler: msvc, cc: cl, cxx: cl }
          - { compiler: clang, cc: clang, cxx: clang++ }
          - { compiler: msvc, arch: x86, cross_arch: x64_x86 }
    env:
      boost_version: 1.84.0
      BOOST_ROOT: ${{ github.workspace }}\deps\boost-1.84.0
      RIME_PLUGINS: ${{ inputs.rime_plugins }}

    steps:
      - name: Checkout last commit
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
          submodules: recursive

      - name: Create env.bat
        run: |
          $envfile = ".\env.bat"
          $envcontent = @"
            set RIME_ROOT=%CD%
            set CXX=${{ matrix.cxx }}
            set CC=${{ matrix.cc }}
            set CMAKE_GENERATOR=Ninja
          "@
          Set-Content -Path $envfile -Value $envcontent
          cat $envfile
          
      - name: Configure MSVC
        if: ${{ matrix.compiler == 'msvc' }}
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.cross_arch || matrix.arch }}

      - name: Configure Ninja
        run: pip install ninja

      - name: Configure clang
        if: ${{ matrix.compiler == 'clang' }}
        run: choco upgrade -y llvm

      - name: Configure build environment
        run: |
          $git_ref_name = git describe --always
          echo "git_ref_name=$git_ref_name" >> $env:GITHUB_ENV
          git submodule > submodule-status

      - name: Install boost
        run: .\install-boost.bat

      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            bin
            include
            lib
            share
          key: ${{ runner.os }}-${{ matrix.compiler }}-${{ matrix.arch }}-${{ hashFiles('submodule-status') }}

      - name: Build dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: .\build.bat deps

      - name: Install Rime plugins
        run: .\action-install-plugins-windows.bat

      - name: Build and test
        run: .\build.bat test

      - name: Create distributable
        run: |
          7z a rime-${{ env.git_ref_name }}-${{ runner.os }}-${{ matrix.compiler }}-${{ matrix.arch }}.7z `
          dist version-info.txt
          7z a -x'!*/.placeholder' rime-deps-${{ env.git_ref_name }}-${{ runner.os }}-${{ matrix.compiler }}-${{ matrix.arch }}.7z `
          bin include lib share

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ runner.os }}-${{ matrix.compiler }}-${{ matrix.arch }}
          path: |
            rime-${{ env.git_ref_name }}-${{ runner.os }}-${{ matrix.compiler }}-${{ matrix.arch }}.7z
            rime-deps-${{ env.git_ref_name }}-${{ runner.os }}-${{ matrix.compiler }}-${{ matrix.arch }}.7z

  build-mingw:
    runs-on: windows-latest
    env:
      RIME_PLUGINS: ${{ inputs.rime_plugins }}
    defaults:
      run:
        shell: msys2 {0}

    steps:
      - name: Install dependencies with MSYS2
        uses: msys2/setup-msys2@v2
        with:
          release: false
          update: true
          msystem: UCRT64
          install: >-
            git
            base-devel
            mingw-w64-ucrt-x86_64-boost
            mingw-w64-ucrt-x86_64-glog
            mingw-w64-ucrt-x86_64-gtest
            mingw-w64-ucrt-x86_64-yaml-cpp
            mingw-w64-ucrt-x86_64-leveldb
            mingw-w64-ucrt-x86_64-marisa
            mingw-w64-ucrt-x86_64-opencc
          pacboy: >-
            toolchain:p
            cmake:p
            ninja:p

      - run: git config --global core.autocrlf input
      - name: Checkout last commit
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
            
      - name: Configure build environment
        run: |
          echo git_ref_name="$(git describe --always)" >> $GITHUB_ENV

      - name: Install Rime plugins
        run: ./action-install-plugins-macos.sh

      - name: Build with mingw-w64
        run: |
          cmake -B build -G Ninja \
            -DCMAKE_INSTALL_PREFIX:PATH=`pwd`/dist \
            -DCMAKE_BUILD_TYPE:STRING=Release \
            -DENABLE_LOGGING:BOOL=ON \
            -DBUILD_TEST:BOOL=ON \
            -DBUILD_STATIC:BOOL=ON \
            -DBUILD_SHARED_LIBS:BOOL=ON
          cmake --build build
          cmake --install build
          cd build && cp ./bin/librime.dll ./test
          ctest --output-on-failure

      - name: Create distributable
        run: |
          tar -cjvf rime-${{ env.git_ref_name }}-${{ runner.os }}-mingw.tar.bz2 \
          dist version-info.txt
          tar -cjvf rime-deps-${{ env.git_ref_name }}-${{ runner.os }}-mingw.tar.bz2 \
          --exclude '*/.placeholder' \
          bin include lib share

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ runner.os }}-mingw
          path: |
            rime-${{ env.git_ref_name }}-${{ runner.os }}-mingw.tar.bz2
